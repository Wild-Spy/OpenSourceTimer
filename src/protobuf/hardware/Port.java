// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Port.proto

package protobuf.hardware;

public final class Port {
  private Port() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface HardwarePortOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf.hardware.HardwarePort)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 id = 1;</code>
     *
     * <pre>
     * This port's id on it's board.  The 'namespace' for ids is a board
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional uint32 id = 1;</code>
     *
     * <pre>
     * This port's id on it's board.  The 'namespace' for ids is a board
     * </pre>
     */
    int getId();

    /**
     * <code>optional string designator = 2;</code>
     *
     * <pre>
     * so you can reuse the same port id on different boards.
     * </pre>
     */
    boolean hasDesignator();
    /**
     * <code>optional string designator = 2;</code>
     *
     * <pre>
     * so you can reuse the same port id on different boards.
     * </pre>
     */
    java.lang.String getDesignator();
    /**
     * <code>optional string designator = 2;</code>
     *
     * <pre>
     * so you can reuse the same port id on different boards.
     * </pre>
     */
    com.google.protobuf.ByteString
        getDesignatorBytes();

    /**
     * <code>optional bool dev_only = 3;</code>
     *
     * <pre>
     * Is this port for developers or end users?
     * </pre>
     */
    boolean hasDevOnly();
    /**
     * <code>optional bool dev_only = 3;</code>
     *
     * <pre>
     * Is this port for developers or end users?
     * </pre>
     */
    boolean getDevOnly();

    /**
     * <code>optional string description = 4;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    boolean hasDescription();
    /**
     * <code>optional string description = 4;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    java.lang.String getDescription();
    /**
     * <code>optional string description = 4;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <code>optional string location = 5;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    boolean hasLocation();
    /**
     * <code>optional string location = 5;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    java.lang.String getLocation();
    /**
     * <code>optional string location = 5;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    com.google.protobuf.ByteString
        getLocationBytes();

    /**
     * <code>optional .protobuf.hardware.HardwarePort.Type type = 6;</code>
     *
     * <pre>
     * What type of port this is
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional .protobuf.hardware.HardwarePort.Type type = 6;</code>
     *
     * <pre>
     * What type of port this is
     * </pre>
     */
    protobuf.hardware.Port.HardwarePort.Type getType();

    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    java.util.List<protobuf.hardware.Pin.HardwarePin> 
        getPinsList();
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    protobuf.hardware.Pin.HardwarePin getPins(int index);
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    int getPinsCount();
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    java.util.List<? extends protobuf.hardware.Pin.HardwarePinOrBuilder> 
        getPinsOrBuilderList();
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    protobuf.hardware.Pin.HardwarePinOrBuilder getPinsOrBuilder(
        int index);

    /**
     * <code>optional uint32 num_pins = 8;</code>
     *
     * <pre>
     * Number of pins
     * </pre>
     */
    boolean hasNumPins();
    /**
     * <code>optional uint32 num_pins = 8;</code>
     *
     * <pre>
     * Number of pins
     * </pre>
     */
    int getNumPins();

    /**
     * <code>optional bool can_power_device = 20;</code>
     *
     * <pre>
     * These are mostly for type POWER_IN ports
     * </pre>
     */
    boolean hasCanPowerDevice();
    /**
     * <code>optional bool can_power_device = 20;</code>
     *
     * <pre>
     * These are mostly for type POWER_IN ports
     * </pre>
     */
    boolean getCanPowerDevice();

    /**
     * <code>optional float min_input_voltage = 21;</code>
     *
     * <pre>
     * The minimum input voltage that can be supplied
     * </pre>
     */
    boolean hasMinInputVoltage();
    /**
     * <code>optional float min_input_voltage = 21;</code>
     *
     * <pre>
     * The minimum input voltage that can be supplied
     * </pre>
     */
    float getMinInputVoltage();

    /**
     * <code>optional float max_input_voltage = 22;</code>
     *
     * <pre>
     * The maximum input voltage that can be supplied
     * </pre>
     */
    boolean hasMaxInputVoltage();
    /**
     * <code>optional float max_input_voltage = 22;</code>
     *
     * <pre>
     * The maximum input voltage that can be supplied
     * </pre>
     */
    float getMaxInputVoltage();

    /**
     * <code>optional .protobuf.hardware.HardwarePort.Protocol protocol = 30;</code>
     *
     * <pre>
     * These are mostly for type DIGITAL_SIGNAL
     * </pre>
     */
    boolean hasProtocol();
    /**
     * <code>optional .protobuf.hardware.HardwarePort.Protocol protocol = 30;</code>
     *
     * <pre>
     * These are mostly for type DIGITAL_SIGNAL
     * </pre>
     */
    protobuf.hardware.Port.HardwarePort.Protocol getProtocol();
  }
  /**
   * Protobuf type {@code protobuf.hardware.HardwarePort}
   *
   * <pre>
   * Describes a port on a piece of hardware
   * </pre>
   */
  public static final class HardwarePort extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:protobuf.hardware.HardwarePort)
      HardwarePortOrBuilder {
    // Use HardwarePort.newBuilder() to construct.
    private HardwarePort(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HardwarePort(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HardwarePort defaultInstance;
    public static HardwarePort getDefaultInstance() {
      return defaultInstance;
    }

    public HardwarePort getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HardwarePort(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              designator_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              devOnly_ = input.readBool();
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              description_ = bs;
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              location_ = bs;
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              protobuf.hardware.Port.HardwarePort.Type value = protobuf.hardware.Port.HardwarePort.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                type_ = value;
              }
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                pins_ = new java.util.ArrayList<protobuf.hardware.Pin.HardwarePin>();
                mutable_bitField0_ |= 0x00000040;
              }
              pins_.add(input.readMessage(protobuf.hardware.Pin.HardwarePin.PARSER, extensionRegistry));
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              numPins_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00000080;
              canPowerDevice_ = input.readBool();
              break;
            }
            case 173: {
              bitField0_ |= 0x00000100;
              minInputVoltage_ = input.readFloat();
              break;
            }
            case 181: {
              bitField0_ |= 0x00000200;
              maxInputVoltage_ = input.readFloat();
              break;
            }
            case 240: {
              int rawValue = input.readEnum();
              protobuf.hardware.Port.HardwarePort.Protocol value = protobuf.hardware.Port.HardwarePort.Protocol.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(30, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                protocol_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          pins_ = java.util.Collections.unmodifiableList(pins_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.hardware.Port.internal_static_protobuf_hardware_HardwarePort_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.hardware.Port.internal_static_protobuf_hardware_HardwarePort_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.hardware.Port.HardwarePort.class, protobuf.hardware.Port.HardwarePort.Builder.class);
    }

    public static com.google.protobuf.Parser<HardwarePort> PARSER =
        new com.google.protobuf.AbstractParser<HardwarePort>() {
      public HardwarePort parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HardwarePort(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HardwarePort> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code protobuf.hardware.HardwarePort.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      UNKNOWN_TYPE(0, 0),
      /**
       * <code>POWER_IN = 1;</code>
       */
      POWER_IN(1, 1),
      /**
       * <code>POWER_OUT = 2;</code>
       */
      POWER_OUT(2, 2),
      /**
       * <code>ANALOG_SIGNAL = 3;</code>
       */
      ANALOG_SIGNAL(3, 3),
      /**
       * <code>DIGITAL_SIGNAL = 4;</code>
       */
      DIGITAL_SIGNAL(4, 4),
      /**
       * <code>MIXED_SIGNAL = 5;</code>
       */
      MIXED_SIGNAL(5, 5),
      /**
       * <code>SWITCH = 6;</code>
       */
      SWITCH(6, 6),
      /**
       * <code>MIXED = 7;</code>
       */
      MIXED(7, 7),
      ;

      /**
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      public static final int UNKNOWN_TYPE_VALUE = 0;
      /**
       * <code>POWER_IN = 1;</code>
       */
      public static final int POWER_IN_VALUE = 1;
      /**
       * <code>POWER_OUT = 2;</code>
       */
      public static final int POWER_OUT_VALUE = 2;
      /**
       * <code>ANALOG_SIGNAL = 3;</code>
       */
      public static final int ANALOG_SIGNAL_VALUE = 3;
      /**
       * <code>DIGITAL_SIGNAL = 4;</code>
       */
      public static final int DIGITAL_SIGNAL_VALUE = 4;
      /**
       * <code>MIXED_SIGNAL = 5;</code>
       */
      public static final int MIXED_SIGNAL_VALUE = 5;
      /**
       * <code>SWITCH = 6;</code>
       */
      public static final int SWITCH_VALUE = 6;
      /**
       * <code>MIXED = 7;</code>
       */
      public static final int MIXED_VALUE = 7;


      public final int getNumber() { return value; }

      public static Type valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_TYPE;
          case 1: return POWER_IN;
          case 2: return POWER_OUT;
          case 3: return ANALOG_SIGNAL;
          case 4: return DIGITAL_SIGNAL;
          case 5: return MIXED_SIGNAL;
          case 6: return SWITCH;
          case 7: return MIXED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return protobuf.hardware.Port.HardwarePort.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Type(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:protobuf.hardware.HardwarePort.Type)
    }

    /**
     * Protobuf enum {@code protobuf.hardware.HardwarePort.Protocol}
     */
    public enum Protocol
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN_PROTOCOL = 0;</code>
       */
      UNKNOWN_PROTOCOL(0, 0),
      /**
       * <code>I2C = 1;</code>
       */
      I2C(1, 1),
      /**
       * <code>SPI = 2;</code>
       */
      SPI(2, 2),
      /**
       * <code>UART = 3;</code>
       */
      UART(3, 3),
      /**
       * <code>USART = 4;</code>
       */
      USART(4, 4),
      /**
       * <code>USB = 5;</code>
       */
      USB(5, 5),
      /**
       * <code>PDI = 6;</code>
       */
      PDI(6, 6),
      /**
       * <code>SWD = 7;</code>
       */
      SWD(7, 7),
      ;

      /**
       * <code>UNKNOWN_PROTOCOL = 0;</code>
       */
      public static final int UNKNOWN_PROTOCOL_VALUE = 0;
      /**
       * <code>I2C = 1;</code>
       */
      public static final int I2C_VALUE = 1;
      /**
       * <code>SPI = 2;</code>
       */
      public static final int SPI_VALUE = 2;
      /**
       * <code>UART = 3;</code>
       */
      public static final int UART_VALUE = 3;
      /**
       * <code>USART = 4;</code>
       */
      public static final int USART_VALUE = 4;
      /**
       * <code>USB = 5;</code>
       */
      public static final int USB_VALUE = 5;
      /**
       * <code>PDI = 6;</code>
       */
      public static final int PDI_VALUE = 6;
      /**
       * <code>SWD = 7;</code>
       */
      public static final int SWD_VALUE = 7;


      public final int getNumber() { return value; }

      public static Protocol valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN_PROTOCOL;
          case 1: return I2C;
          case 2: return SPI;
          case 3: return UART;
          case 4: return USART;
          case 5: return USB;
          case 6: return PDI;
          case 7: return SWD;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Protocol>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Protocol>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Protocol>() {
              public Protocol findValueByNumber(int number) {
                return Protocol.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return protobuf.hardware.Port.HardwarePort.getDescriptor().getEnumTypes().get(1);
      }

      private static final Protocol[] VALUES = values();

      public static Protocol valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Protocol(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:protobuf.hardware.HardwarePort.Protocol)
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional uint32 id = 1;</code>
     *
     * <pre>
     * This port's id on it's board.  The 'namespace' for ids is a board
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 id = 1;</code>
     *
     * <pre>
     * This port's id on it's board.  The 'namespace' for ids is a board
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int DESIGNATOR_FIELD_NUMBER = 2;
    private java.lang.Object designator_;
    /**
     * <code>optional string designator = 2;</code>
     *
     * <pre>
     * so you can reuse the same port id on different boards.
     * </pre>
     */
    public boolean hasDesignator() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string designator = 2;</code>
     *
     * <pre>
     * so you can reuse the same port id on different boards.
     * </pre>
     */
    public java.lang.String getDesignator() {
      java.lang.Object ref = designator_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          designator_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string designator = 2;</code>
     *
     * <pre>
     * so you can reuse the same port id on different boards.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDesignatorBytes() {
      java.lang.Object ref = designator_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        designator_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEV_ONLY_FIELD_NUMBER = 3;
    private boolean devOnly_;
    /**
     * <code>optional bool dev_only = 3;</code>
     *
     * <pre>
     * Is this port for developers or end users?
     * </pre>
     */
    public boolean hasDevOnly() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool dev_only = 3;</code>
     *
     * <pre>
     * Is this port for developers or end users?
     * </pre>
     */
    public boolean getDevOnly() {
      return devOnly_;
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 4;
    private java.lang.Object description_;
    /**
     * <code>optional string description = 4;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string description = 4;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          description_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string description = 4;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOCATION_FIELD_NUMBER = 5;
    private java.lang.Object location_;
    /**
     * <code>optional string location = 5;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string location = 5;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    public java.lang.String getLocation() {
      java.lang.Object ref = location_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          location_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string location = 5;</code>
     *
     * <pre>
     * A description of what the port is for
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLocationBytes() {
      java.lang.Object ref = location_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        location_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 6;
    private protobuf.hardware.Port.HardwarePort.Type type_;
    /**
     * <code>optional .protobuf.hardware.HardwarePort.Type type = 6;</code>
     *
     * <pre>
     * What type of port this is
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .protobuf.hardware.HardwarePort.Type type = 6;</code>
     *
     * <pre>
     * What type of port this is
     * </pre>
     */
    public protobuf.hardware.Port.HardwarePort.Type getType() {
      return type_;
    }

    public static final int PINS_FIELD_NUMBER = 7;
    private java.util.List<protobuf.hardware.Pin.HardwarePin> pins_;
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    public java.util.List<protobuf.hardware.Pin.HardwarePin> getPinsList() {
      return pins_;
    }
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    public java.util.List<? extends protobuf.hardware.Pin.HardwarePinOrBuilder> 
        getPinsOrBuilderList() {
      return pins_;
    }
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    public int getPinsCount() {
      return pins_.size();
    }
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    public protobuf.hardware.Pin.HardwarePin getPins(int index) {
      return pins_.get(index);
    }
    /**
     * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
     *
     * <pre>
     * Pin descriptors
     * </pre>
     */
    public protobuf.hardware.Pin.HardwarePinOrBuilder getPinsOrBuilder(
        int index) {
      return pins_.get(index);
    }

    public static final int NUM_PINS_FIELD_NUMBER = 8;
    private int numPins_;
    /**
     * <code>optional uint32 num_pins = 8;</code>
     *
     * <pre>
     * Number of pins
     * </pre>
     */
    public boolean hasNumPins() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 num_pins = 8;</code>
     *
     * <pre>
     * Number of pins
     * </pre>
     */
    public int getNumPins() {
      return numPins_;
    }

    public static final int CAN_POWER_DEVICE_FIELD_NUMBER = 20;
    private boolean canPowerDevice_;
    /**
     * <code>optional bool can_power_device = 20;</code>
     *
     * <pre>
     * These are mostly for type POWER_IN ports
     * </pre>
     */
    public boolean hasCanPowerDevice() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool can_power_device = 20;</code>
     *
     * <pre>
     * These are mostly for type POWER_IN ports
     * </pre>
     */
    public boolean getCanPowerDevice() {
      return canPowerDevice_;
    }

    public static final int MIN_INPUT_VOLTAGE_FIELD_NUMBER = 21;
    private float minInputVoltage_;
    /**
     * <code>optional float min_input_voltage = 21;</code>
     *
     * <pre>
     * The minimum input voltage that can be supplied
     * </pre>
     */
    public boolean hasMinInputVoltage() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float min_input_voltage = 21;</code>
     *
     * <pre>
     * The minimum input voltage that can be supplied
     * </pre>
     */
    public float getMinInputVoltage() {
      return minInputVoltage_;
    }

    public static final int MAX_INPUT_VOLTAGE_FIELD_NUMBER = 22;
    private float maxInputVoltage_;
    /**
     * <code>optional float max_input_voltage = 22;</code>
     *
     * <pre>
     * The maximum input voltage that can be supplied
     * </pre>
     */
    public boolean hasMaxInputVoltage() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float max_input_voltage = 22;</code>
     *
     * <pre>
     * The maximum input voltage that can be supplied
     * </pre>
     */
    public float getMaxInputVoltage() {
      return maxInputVoltage_;
    }

    public static final int PROTOCOL_FIELD_NUMBER = 30;
    private protobuf.hardware.Port.HardwarePort.Protocol protocol_;
    /**
     * <code>optional .protobuf.hardware.HardwarePort.Protocol protocol = 30;</code>
     *
     * <pre>
     * These are mostly for type DIGITAL_SIGNAL
     * </pre>
     */
    public boolean hasProtocol() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .protobuf.hardware.HardwarePort.Protocol protocol = 30;</code>
     *
     * <pre>
     * These are mostly for type DIGITAL_SIGNAL
     * </pre>
     */
    public protobuf.hardware.Port.HardwarePort.Protocol getProtocol() {
      return protocol_;
    }

    private void initFields() {
      id_ = 0;
      designator_ = "";
      devOnly_ = false;
      description_ = "";
      location_ = "";
      type_ = protobuf.hardware.Port.HardwarePort.Type.UNKNOWN_TYPE;
      pins_ = java.util.Collections.emptyList();
      numPins_ = 0;
      canPowerDevice_ = false;
      minInputVoltage_ = 0F;
      maxInputVoltage_ = 0F;
      protocol_ = protobuf.hardware.Port.HardwarePort.Protocol.UNKNOWN_PROTOCOL;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getDesignatorBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, devOnly_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getDescriptionBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getLocationBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, type_.getNumber());
      }
      for (int i = 0; i < pins_.size(); i++) {
        output.writeMessage(7, pins_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(8, numPins_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(20, canPowerDevice_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(21, minInputVoltage_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(22, maxInputVoltage_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(30, protocol_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getDesignatorBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, devOnly_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getDescriptionBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getLocationBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, type_.getNumber());
      }
      for (int i = 0; i < pins_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, pins_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, numPins_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20, canPowerDevice_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, minInputVoltage_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, maxInputVoltage_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(30, protocol_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.hardware.Port.HardwarePort parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.hardware.Port.HardwarePort parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.hardware.Port.HardwarePort parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.hardware.Port.HardwarePort parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.hardware.Port.HardwarePort parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.hardware.Port.HardwarePort parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.hardware.Port.HardwarePort parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.hardware.Port.HardwarePort parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.hardware.Port.HardwarePort parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.hardware.Port.HardwarePort parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.hardware.Port.HardwarePort prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code protobuf.hardware.HardwarePort}
     *
     * <pre>
     * Describes a port on a piece of hardware
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.hardware.HardwarePort)
        protobuf.hardware.Port.HardwarePortOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.hardware.Port.internal_static_protobuf_hardware_HardwarePort_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.hardware.Port.internal_static_protobuf_hardware_HardwarePort_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.hardware.Port.HardwarePort.class, protobuf.hardware.Port.HardwarePort.Builder.class);
      }

      // Construct using protobuf.hardware.Port.HardwarePort.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPinsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        designator_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        devOnly_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        description_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        location_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        type_ = protobuf.hardware.Port.HardwarePort.Type.UNKNOWN_TYPE;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (pinsBuilder_ == null) {
          pins_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          pinsBuilder_.clear();
        }
        numPins_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        canPowerDevice_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        minInputVoltage_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        maxInputVoltage_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        protocol_ = protobuf.hardware.Port.HardwarePort.Protocol.UNKNOWN_PROTOCOL;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.hardware.Port.internal_static_protobuf_hardware_HardwarePort_descriptor;
      }

      public protobuf.hardware.Port.HardwarePort getDefaultInstanceForType() {
        return protobuf.hardware.Port.HardwarePort.getDefaultInstance();
      }

      public protobuf.hardware.Port.HardwarePort build() {
        protobuf.hardware.Port.HardwarePort result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.hardware.Port.HardwarePort buildPartial() {
        protobuf.hardware.Port.HardwarePort result = new protobuf.hardware.Port.HardwarePort(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.designator_ = designator_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.devOnly_ = devOnly_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.description_ = description_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.location_ = location_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.type_ = type_;
        if (pinsBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            pins_ = java.util.Collections.unmodifiableList(pins_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.pins_ = pins_;
        } else {
          result.pins_ = pinsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.numPins_ = numPins_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.canPowerDevice_ = canPowerDevice_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.minInputVoltage_ = minInputVoltage_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.maxInputVoltage_ = maxInputVoltage_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.protocol_ = protocol_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.hardware.Port.HardwarePort) {
          return mergeFrom((protobuf.hardware.Port.HardwarePort)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.hardware.Port.HardwarePort other) {
        if (other == protobuf.hardware.Port.HardwarePort.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasDesignator()) {
          bitField0_ |= 0x00000002;
          designator_ = other.designator_;
          onChanged();
        }
        if (other.hasDevOnly()) {
          setDevOnly(other.getDevOnly());
        }
        if (other.hasDescription()) {
          bitField0_ |= 0x00000008;
          description_ = other.description_;
          onChanged();
        }
        if (other.hasLocation()) {
          bitField0_ |= 0x00000010;
          location_ = other.location_;
          onChanged();
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (pinsBuilder_ == null) {
          if (!other.pins_.isEmpty()) {
            if (pins_.isEmpty()) {
              pins_ = other.pins_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensurePinsIsMutable();
              pins_.addAll(other.pins_);
            }
            onChanged();
          }
        } else {
          if (!other.pins_.isEmpty()) {
            if (pinsBuilder_.isEmpty()) {
              pinsBuilder_.dispose();
              pinsBuilder_ = null;
              pins_ = other.pins_;
              bitField0_ = (bitField0_ & ~0x00000040);
              pinsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPinsFieldBuilder() : null;
            } else {
              pinsBuilder_.addAllMessages(other.pins_);
            }
          }
        }
        if (other.hasNumPins()) {
          setNumPins(other.getNumPins());
        }
        if (other.hasCanPowerDevice()) {
          setCanPowerDevice(other.getCanPowerDevice());
        }
        if (other.hasMinInputVoltage()) {
          setMinInputVoltage(other.getMinInputVoltage());
        }
        if (other.hasMaxInputVoltage()) {
          setMaxInputVoltage(other.getMaxInputVoltage());
        }
        if (other.hasProtocol()) {
          setProtocol(other.getProtocol());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.hardware.Port.HardwarePort parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.hardware.Port.HardwarePort) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * This port's id on it's board.  The 'namespace' for ids is a board
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * This port's id on it's board.  The 'namespace' for ids is a board
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * This port's id on it's board.  The 'namespace' for ids is a board
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * This port's id on it's board.  The 'namespace' for ids is a board
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object designator_ = "";
      /**
       * <code>optional string designator = 2;</code>
       *
       * <pre>
       * so you can reuse the same port id on different boards.
       * </pre>
       */
      public boolean hasDesignator() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string designator = 2;</code>
       *
       * <pre>
       * so you can reuse the same port id on different boards.
       * </pre>
       */
      public java.lang.String getDesignator() {
        java.lang.Object ref = designator_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            designator_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string designator = 2;</code>
       *
       * <pre>
       * so you can reuse the same port id on different boards.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDesignatorBytes() {
        java.lang.Object ref = designator_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          designator_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string designator = 2;</code>
       *
       * <pre>
       * so you can reuse the same port id on different boards.
       * </pre>
       */
      public Builder setDesignator(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        designator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string designator = 2;</code>
       *
       * <pre>
       * so you can reuse the same port id on different boards.
       * </pre>
       */
      public Builder clearDesignator() {
        bitField0_ = (bitField0_ & ~0x00000002);
        designator_ = getDefaultInstance().getDesignator();
        onChanged();
        return this;
      }
      /**
       * <code>optional string designator = 2;</code>
       *
       * <pre>
       * so you can reuse the same port id on different boards.
       * </pre>
       */
      public Builder setDesignatorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        designator_ = value;
        onChanged();
        return this;
      }

      private boolean devOnly_ ;
      /**
       * <code>optional bool dev_only = 3;</code>
       *
       * <pre>
       * Is this port for developers or end users?
       * </pre>
       */
      public boolean hasDevOnly() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool dev_only = 3;</code>
       *
       * <pre>
       * Is this port for developers or end users?
       * </pre>
       */
      public boolean getDevOnly() {
        return devOnly_;
      }
      /**
       * <code>optional bool dev_only = 3;</code>
       *
       * <pre>
       * Is this port for developers or end users?
       * </pre>
       */
      public Builder setDevOnly(boolean value) {
        bitField0_ |= 0x00000004;
        devOnly_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool dev_only = 3;</code>
       *
       * <pre>
       * Is this port for developers or end users?
       * </pre>
       */
      public Builder clearDevOnly() {
        bitField0_ = (bitField0_ & ~0x00000004);
        devOnly_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <code>optional string description = 4;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string description = 4;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            description_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string description = 4;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string description = 4;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        description_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string description = 4;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public Builder clearDescription() {
        bitField0_ = (bitField0_ & ~0x00000008);
        description_ = getDefaultInstance().getDescription();
        onChanged();
        return this;
      }
      /**
       * <code>optional string description = 4;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        description_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object location_ = "";
      /**
       * <code>optional string location = 5;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string location = 5;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public java.lang.String getLocation() {
        java.lang.Object ref = location_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            location_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string location = 5;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLocationBytes() {
        java.lang.Object ref = location_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          location_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string location = 5;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public Builder setLocation(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        location_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string location = 5;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public Builder clearLocation() {
        bitField0_ = (bitField0_ & ~0x00000010);
        location_ = getDefaultInstance().getLocation();
        onChanged();
        return this;
      }
      /**
       * <code>optional string location = 5;</code>
       *
       * <pre>
       * A description of what the port is for
       * </pre>
       */
      public Builder setLocationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        location_ = value;
        onChanged();
        return this;
      }

      private protobuf.hardware.Port.HardwarePort.Type type_ = protobuf.hardware.Port.HardwarePort.Type.UNKNOWN_TYPE;
      /**
       * <code>optional .protobuf.hardware.HardwarePort.Type type = 6;</code>
       *
       * <pre>
       * What type of port this is
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .protobuf.hardware.HardwarePort.Type type = 6;</code>
       *
       * <pre>
       * What type of port this is
       * </pre>
       */
      public protobuf.hardware.Port.HardwarePort.Type getType() {
        return type_;
      }
      /**
       * <code>optional .protobuf.hardware.HardwarePort.Type type = 6;</code>
       *
       * <pre>
       * What type of port this is
       * </pre>
       */
      public Builder setType(protobuf.hardware.Port.HardwarePort.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .protobuf.hardware.HardwarePort.Type type = 6;</code>
       *
       * <pre>
       * What type of port this is
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        type_ = protobuf.hardware.Port.HardwarePort.Type.UNKNOWN_TYPE;
        onChanged();
        return this;
      }

      private java.util.List<protobuf.hardware.Pin.HardwarePin> pins_ =
        java.util.Collections.emptyList();
      private void ensurePinsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          pins_ = new java.util.ArrayList<protobuf.hardware.Pin.HardwarePin>(pins_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.hardware.Pin.HardwarePin, protobuf.hardware.Pin.HardwarePin.Builder, protobuf.hardware.Pin.HardwarePinOrBuilder> pinsBuilder_;

      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public java.util.List<protobuf.hardware.Pin.HardwarePin> getPinsList() {
        if (pinsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(pins_);
        } else {
          return pinsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public int getPinsCount() {
        if (pinsBuilder_ == null) {
          return pins_.size();
        } else {
          return pinsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public protobuf.hardware.Pin.HardwarePin getPins(int index) {
        if (pinsBuilder_ == null) {
          return pins_.get(index);
        } else {
          return pinsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder setPins(
          int index, protobuf.hardware.Pin.HardwarePin value) {
        if (pinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePinsIsMutable();
          pins_.set(index, value);
          onChanged();
        } else {
          pinsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder setPins(
          int index, protobuf.hardware.Pin.HardwarePin.Builder builderForValue) {
        if (pinsBuilder_ == null) {
          ensurePinsIsMutable();
          pins_.set(index, builderForValue.build());
          onChanged();
        } else {
          pinsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder addPins(protobuf.hardware.Pin.HardwarePin value) {
        if (pinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePinsIsMutable();
          pins_.add(value);
          onChanged();
        } else {
          pinsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder addPins(
          int index, protobuf.hardware.Pin.HardwarePin value) {
        if (pinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePinsIsMutable();
          pins_.add(index, value);
          onChanged();
        } else {
          pinsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder addPins(
          protobuf.hardware.Pin.HardwarePin.Builder builderForValue) {
        if (pinsBuilder_ == null) {
          ensurePinsIsMutable();
          pins_.add(builderForValue.build());
          onChanged();
        } else {
          pinsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder addPins(
          int index, protobuf.hardware.Pin.HardwarePin.Builder builderForValue) {
        if (pinsBuilder_ == null) {
          ensurePinsIsMutable();
          pins_.add(index, builderForValue.build());
          onChanged();
        } else {
          pinsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder addAllPins(
          java.lang.Iterable<? extends protobuf.hardware.Pin.HardwarePin> values) {
        if (pinsBuilder_ == null) {
          ensurePinsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, pins_);
          onChanged();
        } else {
          pinsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder clearPins() {
        if (pinsBuilder_ == null) {
          pins_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          pinsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public Builder removePins(int index) {
        if (pinsBuilder_ == null) {
          ensurePinsIsMutable();
          pins_.remove(index);
          onChanged();
        } else {
          pinsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public protobuf.hardware.Pin.HardwarePin.Builder getPinsBuilder(
          int index) {
        return getPinsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public protobuf.hardware.Pin.HardwarePinOrBuilder getPinsOrBuilder(
          int index) {
        if (pinsBuilder_ == null) {
          return pins_.get(index);  } else {
          return pinsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public java.util.List<? extends protobuf.hardware.Pin.HardwarePinOrBuilder> 
           getPinsOrBuilderList() {
        if (pinsBuilder_ != null) {
          return pinsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(pins_);
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public protobuf.hardware.Pin.HardwarePin.Builder addPinsBuilder() {
        return getPinsFieldBuilder().addBuilder(
            protobuf.hardware.Pin.HardwarePin.getDefaultInstance());
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public protobuf.hardware.Pin.HardwarePin.Builder addPinsBuilder(
          int index) {
        return getPinsFieldBuilder().addBuilder(
            index, protobuf.hardware.Pin.HardwarePin.getDefaultInstance());
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePin pins = 7;</code>
       *
       * <pre>
       * Pin descriptors
       * </pre>
       */
      public java.util.List<protobuf.hardware.Pin.HardwarePin.Builder> 
           getPinsBuilderList() {
        return getPinsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.hardware.Pin.HardwarePin, protobuf.hardware.Pin.HardwarePin.Builder, protobuf.hardware.Pin.HardwarePinOrBuilder> 
          getPinsFieldBuilder() {
        if (pinsBuilder_ == null) {
          pinsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.hardware.Pin.HardwarePin, protobuf.hardware.Pin.HardwarePin.Builder, protobuf.hardware.Pin.HardwarePinOrBuilder>(
                  pins_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          pins_ = null;
        }
        return pinsBuilder_;
      }

      private int numPins_ ;
      /**
       * <code>optional uint32 num_pins = 8;</code>
       *
       * <pre>
       * Number of pins
       * </pre>
       */
      public boolean hasNumPins() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 num_pins = 8;</code>
       *
       * <pre>
       * Number of pins
       * </pre>
       */
      public int getNumPins() {
        return numPins_;
      }
      /**
       * <code>optional uint32 num_pins = 8;</code>
       *
       * <pre>
       * Number of pins
       * </pre>
       */
      public Builder setNumPins(int value) {
        bitField0_ |= 0x00000080;
        numPins_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_pins = 8;</code>
       *
       * <pre>
       * Number of pins
       * </pre>
       */
      public Builder clearNumPins() {
        bitField0_ = (bitField0_ & ~0x00000080);
        numPins_ = 0;
        onChanged();
        return this;
      }

      private boolean canPowerDevice_ ;
      /**
       * <code>optional bool can_power_device = 20;</code>
       *
       * <pre>
       * These are mostly for type POWER_IN ports
       * </pre>
       */
      public boolean hasCanPowerDevice() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool can_power_device = 20;</code>
       *
       * <pre>
       * These are mostly for type POWER_IN ports
       * </pre>
       */
      public boolean getCanPowerDevice() {
        return canPowerDevice_;
      }
      /**
       * <code>optional bool can_power_device = 20;</code>
       *
       * <pre>
       * These are mostly for type POWER_IN ports
       * </pre>
       */
      public Builder setCanPowerDevice(boolean value) {
        bitField0_ |= 0x00000100;
        canPowerDevice_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool can_power_device = 20;</code>
       *
       * <pre>
       * These are mostly for type POWER_IN ports
       * </pre>
       */
      public Builder clearCanPowerDevice() {
        bitField0_ = (bitField0_ & ~0x00000100);
        canPowerDevice_ = false;
        onChanged();
        return this;
      }

      private float minInputVoltage_ ;
      /**
       * <code>optional float min_input_voltage = 21;</code>
       *
       * <pre>
       * The minimum input voltage that can be supplied
       * </pre>
       */
      public boolean hasMinInputVoltage() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float min_input_voltage = 21;</code>
       *
       * <pre>
       * The minimum input voltage that can be supplied
       * </pre>
       */
      public float getMinInputVoltage() {
        return minInputVoltage_;
      }
      /**
       * <code>optional float min_input_voltage = 21;</code>
       *
       * <pre>
       * The minimum input voltage that can be supplied
       * </pre>
       */
      public Builder setMinInputVoltage(float value) {
        bitField0_ |= 0x00000200;
        minInputVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float min_input_voltage = 21;</code>
       *
       * <pre>
       * The minimum input voltage that can be supplied
       * </pre>
       */
      public Builder clearMinInputVoltage() {
        bitField0_ = (bitField0_ & ~0x00000200);
        minInputVoltage_ = 0F;
        onChanged();
        return this;
      }

      private float maxInputVoltage_ ;
      /**
       * <code>optional float max_input_voltage = 22;</code>
       *
       * <pre>
       * The maximum input voltage that can be supplied
       * </pre>
       */
      public boolean hasMaxInputVoltage() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float max_input_voltage = 22;</code>
       *
       * <pre>
       * The maximum input voltage that can be supplied
       * </pre>
       */
      public float getMaxInputVoltage() {
        return maxInputVoltage_;
      }
      /**
       * <code>optional float max_input_voltage = 22;</code>
       *
       * <pre>
       * The maximum input voltage that can be supplied
       * </pre>
       */
      public Builder setMaxInputVoltage(float value) {
        bitField0_ |= 0x00000400;
        maxInputVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float max_input_voltage = 22;</code>
       *
       * <pre>
       * The maximum input voltage that can be supplied
       * </pre>
       */
      public Builder clearMaxInputVoltage() {
        bitField0_ = (bitField0_ & ~0x00000400);
        maxInputVoltage_ = 0F;
        onChanged();
        return this;
      }

      private protobuf.hardware.Port.HardwarePort.Protocol protocol_ = protobuf.hardware.Port.HardwarePort.Protocol.UNKNOWN_PROTOCOL;
      /**
       * <code>optional .protobuf.hardware.HardwarePort.Protocol protocol = 30;</code>
       *
       * <pre>
       * These are mostly for type DIGITAL_SIGNAL
       * </pre>
       */
      public boolean hasProtocol() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .protobuf.hardware.HardwarePort.Protocol protocol = 30;</code>
       *
       * <pre>
       * These are mostly for type DIGITAL_SIGNAL
       * </pre>
       */
      public protobuf.hardware.Port.HardwarePort.Protocol getProtocol() {
        return protocol_;
      }
      /**
       * <code>optional .protobuf.hardware.HardwarePort.Protocol protocol = 30;</code>
       *
       * <pre>
       * These are mostly for type DIGITAL_SIGNAL
       * </pre>
       */
      public Builder setProtocol(protobuf.hardware.Port.HardwarePort.Protocol value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000800;
        protocol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .protobuf.hardware.HardwarePort.Protocol protocol = 30;</code>
       *
       * <pre>
       * These are mostly for type DIGITAL_SIGNAL
       * </pre>
       */
      public Builder clearProtocol() {
        bitField0_ = (bitField0_ & ~0x00000800);
        protocol_ = protobuf.hardware.Port.HardwarePort.Protocol.UNKNOWN_PROTOCOL;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf.hardware.HardwarePort)
    }

    static {
      defaultInstance = new HardwarePort(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:protobuf.hardware.HardwarePort)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_protobuf_hardware_HardwarePort_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_protobuf_hardware_HardwarePort_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\nPort.proto\022\021protobuf.hardware\032\tPin.pro" +
      "to\"\323\004\n\014HardwarePort\022\n\n\002id\030\001 \001(\r\022\022\n\ndesig" +
      "nator\030\002 \001(\t\022\020\n\010dev_only\030\003 \001(\010\022\023\n\013descrip" +
      "tion\030\004 \001(\t\022\020\n\010location\030\005 \001(\t\0222\n\004type\030\006 \001" +
      "(\0162$.protobuf.hardware.HardwarePort.Type" +
      "\022,\n\004pins\030\007 \003(\0132\036.protobuf.hardware.Hardw" +
      "arePin\022\020\n\010num_pins\030\010 \001(\r\022\030\n\020can_power_de" +
      "vice\030\024 \001(\010\022\031\n\021min_input_voltage\030\025 \001(\002\022\031\n" +
      "\021max_input_voltage\030\026 \001(\002\022:\n\010protocol\030\036 \001" +
      "(\0162(.protobuf.hardware.HardwarePort.Prot",
      "ocol\"\205\001\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\014\n\010POWER" +
      "_IN\020\001\022\r\n\tPOWER_OUT\020\002\022\021\n\rANALOG_SIGNAL\020\003\022" +
      "\022\n\016DIGITAL_SIGNAL\020\004\022\020\n\014MIXED_SIGNAL\020\005\022\n\n" +
      "\006SWITCH\020\006\022\t\n\005MIXED\020\007\"b\n\010Protocol\022\024\n\020UNKN" +
      "OWN_PROTOCOL\020\000\022\007\n\003I2C\020\001\022\007\n\003SPI\020\002\022\010\n\004UART" +
      "\020\003\022\t\n\005USART\020\004\022\007\n\003USB\020\005\022\007\n\003PDI\020\006\022\007\n\003SWD\020\007"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.hardware.Pin.getDescriptor(),
        }, assigner);
    internal_static_protobuf_hardware_HardwarePort_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_protobuf_hardware_HardwarePort_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_protobuf_hardware_HardwarePort_descriptor,
        new java.lang.String[] { "Id", "Designator", "DevOnly", "Description", "Location", "Type", "Pins", "NumPins", "CanPowerDevice", "MinInputVoltage", "MaxInputVoltage", "Protocol", });
    protobuf.hardware.Pin.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
