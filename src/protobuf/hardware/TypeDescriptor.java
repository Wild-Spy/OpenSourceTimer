// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TypeDescriptor.proto

package protobuf.hardware;

public final class TypeDescriptor {
  private TypeDescriptor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface HardwareTypeDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protobuf.hardware.HardwareTypeDescriptor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 hardware_id = 1;</code>
     *
     * <pre>
     * Hardware type plus revision
     * </pre>
     */
    boolean hasHardwareId();
    /**
     * <code>optional uint32 hardware_id = 1;</code>
     *
     * <pre>
     * Hardware type plus revision
     * </pre>
     */
    int getHardwareId();

    /**
     * <code>optional uint32 option_id = 2;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    boolean hasOptionId();
    /**
     * <code>optional uint32 option_id = 2;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    int getOptionId();

    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    java.util.List<protobuf.hardware.Port.HardwarePort> 
        getPortsList();
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    protobuf.hardware.Port.HardwarePort getPorts(int index);
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    int getPortsCount();
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    java.util.List<? extends protobuf.hardware.Port.HardwarePortOrBuilder> 
        getPortsOrBuilderList();
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    protobuf.hardware.Port.HardwarePortOrBuilder getPortsOrBuilder(
        int index);

    /**
     * <code>optional float sleep_current_ua = 17;</code>
     *
     * <pre>
     * in microamps
     * </pre>
     */
    boolean hasSleepCurrentUa();
    /**
     * <code>optional float sleep_current_ua = 17;</code>
     *
     * <pre>
     * in microamps
     * </pre>
     */
    float getSleepCurrentUa();

    /**
     * <code>optional float active_current_ma = 18;</code>
     *
     * <pre>
     * in milliamps
     * </pre>
     */
    boolean hasActiveCurrentMa();
    /**
     * <code>optional float active_current_ma = 18;</code>
     *
     * <pre>
     * in milliamps
     * </pre>
     */
    float getActiveCurrentMa();

    /**
     * <code>optional uint32 num_channels = 19;</code>
     *
     * <pre>
     * The number of channels on the device
     * </pre>
     */
    boolean hasNumChannels();
    /**
     * <code>optional uint32 num_channels = 19;</code>
     *
     * <pre>
     * The number of channels on the device
     * </pre>
     */
    int getNumChannels();
  }
  /**
   * Protobuf type {@code protobuf.hardware.HardwareTypeDescriptor}
   */
  public static final class HardwareTypeDescriptor extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:protobuf.hardware.HardwareTypeDescriptor)
      HardwareTypeDescriptorOrBuilder {
    // Use HardwareTypeDescriptor.newBuilder() to construct.
    private HardwareTypeDescriptor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HardwareTypeDescriptor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HardwareTypeDescriptor defaultInstance;
    public static HardwareTypeDescriptor getDefaultInstance() {
      return defaultInstance;
    }

    public HardwareTypeDescriptor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HardwareTypeDescriptor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              hardwareId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              optionId_ = input.readUInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                ports_ = new java.util.ArrayList<protobuf.hardware.Port.HardwarePort>();
                mutable_bitField0_ |= 0x00000008;
              }
              ports_.add(input.readMessage(protobuf.hardware.Port.HardwarePort.PARSER, extensionRegistry));
              break;
            }
            case 141: {
              bitField0_ |= 0x00000008;
              sleepCurrentUa_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00000010;
              activeCurrentMa_ = input.readFloat();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000020;
              numChannels_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          ports_ = java.util.Collections.unmodifiableList(ports_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.hardware.TypeDescriptor.internal_static_protobuf_hardware_HardwareTypeDescriptor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.hardware.TypeDescriptor.internal_static_protobuf_hardware_HardwareTypeDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor.class, protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor.Builder.class);
    }

    public static com.google.protobuf.Parser<HardwareTypeDescriptor> PARSER =
        new com.google.protobuf.AbstractParser<HardwareTypeDescriptor>() {
      public HardwareTypeDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HardwareTypeDescriptor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HardwareTypeDescriptor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int HARDWARE_ID_FIELD_NUMBER = 1;
    private int hardwareId_;
    /**
     * <code>optional uint32 hardware_id = 1;</code>
     *
     * <pre>
     * Hardware type plus revision
     * </pre>
     */
    public boolean hasHardwareId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 hardware_id = 1;</code>
     *
     * <pre>
     * Hardware type plus revision
     * </pre>
     */
    public int getHardwareId() {
      return hardwareId_;
    }

    public static final int OPTION_ID_FIELD_NUMBER = 2;
    private int optionId_;
    /**
     * <code>optional uint32 option_id = 2;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    public boolean hasOptionId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 option_id = 2;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    public int getOptionId() {
      return optionId_;
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     * Hardware options
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PORTS_FIELD_NUMBER = 16;
    private java.util.List<protobuf.hardware.Port.HardwarePort> ports_;
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    public java.util.List<protobuf.hardware.Port.HardwarePort> getPortsList() {
      return ports_;
    }
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    public java.util.List<? extends protobuf.hardware.Port.HardwarePortOrBuilder> 
        getPortsOrBuilderList() {
      return ports_;
    }
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    public int getPortsCount() {
      return ports_.size();
    }
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    public protobuf.hardware.Port.HardwarePort getPorts(int index) {
      return ports_.get(index);
    }
    /**
     * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
     *
     * <pre>
     * Description of each port on the board
     * </pre>
     */
    public protobuf.hardware.Port.HardwarePortOrBuilder getPortsOrBuilder(
        int index) {
      return ports_.get(index);
    }

    public static final int SLEEP_CURRENT_UA_FIELD_NUMBER = 17;
    private float sleepCurrentUa_;
    /**
     * <code>optional float sleep_current_ua = 17;</code>
     *
     * <pre>
     * in microamps
     * </pre>
     */
    public boolean hasSleepCurrentUa() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float sleep_current_ua = 17;</code>
     *
     * <pre>
     * in microamps
     * </pre>
     */
    public float getSleepCurrentUa() {
      return sleepCurrentUa_;
    }

    public static final int ACTIVE_CURRENT_MA_FIELD_NUMBER = 18;
    private float activeCurrentMa_;
    /**
     * <code>optional float active_current_ma = 18;</code>
     *
     * <pre>
     * in milliamps
     * </pre>
     */
    public boolean hasActiveCurrentMa() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float active_current_ma = 18;</code>
     *
     * <pre>
     * in milliamps
     * </pre>
     */
    public float getActiveCurrentMa() {
      return activeCurrentMa_;
    }

    public static final int NUM_CHANNELS_FIELD_NUMBER = 19;
    private int numChannels_;
    /**
     * <code>optional uint32 num_channels = 19;</code>
     *
     * <pre>
     * The number of channels on the device
     * </pre>
     */
    public boolean hasNumChannels() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 num_channels = 19;</code>
     *
     * <pre>
     * The number of channels on the device
     * </pre>
     */
    public int getNumChannels() {
      return numChannels_;
    }

    private void initFields() {
      hardwareId_ = 0;
      optionId_ = 0;
      name_ = "";
      ports_ = java.util.Collections.emptyList();
      sleepCurrentUa_ = 0F;
      activeCurrentMa_ = 0F;
      numChannels_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, hardwareId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, optionId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      for (int i = 0; i < ports_.size(); i++) {
        output.writeMessage(16, ports_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(17, sleepCurrentUa_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(18, activeCurrentMa_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(19, numChannels_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, hardwareId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, optionId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      for (int i = 0; i < ports_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, ports_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, sleepCurrentUa_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, activeCurrentMa_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, numChannels_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code protobuf.hardware.HardwareTypeDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:protobuf.hardware.HardwareTypeDescriptor)
        protobuf.hardware.TypeDescriptor.HardwareTypeDescriptorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.hardware.TypeDescriptor.internal_static_protobuf_hardware_HardwareTypeDescriptor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.hardware.TypeDescriptor.internal_static_protobuf_hardware_HardwareTypeDescriptor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor.class, protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor.Builder.class);
      }

      // Construct using protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPortsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        hardwareId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        optionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        if (portsBuilder_ == null) {
          ports_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          portsBuilder_.clear();
        }
        sleepCurrentUa_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        activeCurrentMa_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        numChannels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.hardware.TypeDescriptor.internal_static_protobuf_hardware_HardwareTypeDescriptor_descriptor;
      }

      public protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor getDefaultInstanceForType() {
        return protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor.getDefaultInstance();
      }

      public protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor build() {
        protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor buildPartial() {
        protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor result = new protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hardwareId_ = hardwareId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.optionId_ = optionId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (portsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            ports_ = java.util.Collections.unmodifiableList(ports_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.ports_ = ports_;
        } else {
          result.ports_ = portsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.sleepCurrentUa_ = sleepCurrentUa_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.activeCurrentMa_ = activeCurrentMa_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.numChannels_ = numChannels_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor) {
          return mergeFrom((protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor other) {
        if (other == protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor.getDefaultInstance()) return this;
        if (other.hasHardwareId()) {
          setHardwareId(other.getHardwareId());
        }
        if (other.hasOptionId()) {
          setOptionId(other.getOptionId());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          onChanged();
        }
        if (portsBuilder_ == null) {
          if (!other.ports_.isEmpty()) {
            if (ports_.isEmpty()) {
              ports_ = other.ports_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensurePortsIsMutable();
              ports_.addAll(other.ports_);
            }
            onChanged();
          }
        } else {
          if (!other.ports_.isEmpty()) {
            if (portsBuilder_.isEmpty()) {
              portsBuilder_.dispose();
              portsBuilder_ = null;
              ports_ = other.ports_;
              bitField0_ = (bitField0_ & ~0x00000008);
              portsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPortsFieldBuilder() : null;
            } else {
              portsBuilder_.addAllMessages(other.ports_);
            }
          }
        }
        if (other.hasSleepCurrentUa()) {
          setSleepCurrentUa(other.getSleepCurrentUa());
        }
        if (other.hasActiveCurrentMa()) {
          setActiveCurrentMa(other.getActiveCurrentMa());
        }
        if (other.hasNumChannels()) {
          setNumChannels(other.getNumChannels());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.hardware.TypeDescriptor.HardwareTypeDescriptor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int hardwareId_ ;
      /**
       * <code>optional uint32 hardware_id = 1;</code>
       *
       * <pre>
       * Hardware type plus revision
       * </pre>
       */
      public boolean hasHardwareId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 hardware_id = 1;</code>
       *
       * <pre>
       * Hardware type plus revision
       * </pre>
       */
      public int getHardwareId() {
        return hardwareId_;
      }
      /**
       * <code>optional uint32 hardware_id = 1;</code>
       *
       * <pre>
       * Hardware type plus revision
       * </pre>
       */
      public Builder setHardwareId(int value) {
        bitField0_ |= 0x00000001;
        hardwareId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 hardware_id = 1;</code>
       *
       * <pre>
       * Hardware type plus revision
       * </pre>
       */
      public Builder clearHardwareId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hardwareId_ = 0;
        onChanged();
        return this;
      }

      private int optionId_ ;
      /**
       * <code>optional uint32 option_id = 2;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public boolean hasOptionId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 option_id = 2;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public int getOptionId() {
        return optionId_;
      }
      /**
       * <code>optional uint32 option_id = 2;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public Builder setOptionId(int value) {
        bitField0_ |= 0x00000002;
        optionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 option_id = 2;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public Builder clearOptionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        optionId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * Hardware options
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<protobuf.hardware.Port.HardwarePort> ports_ =
        java.util.Collections.emptyList();
      private void ensurePortsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          ports_ = new java.util.ArrayList<protobuf.hardware.Port.HardwarePort>(ports_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.hardware.Port.HardwarePort, protobuf.hardware.Port.HardwarePort.Builder, protobuf.hardware.Port.HardwarePortOrBuilder> portsBuilder_;

      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public java.util.List<protobuf.hardware.Port.HardwarePort> getPortsList() {
        if (portsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ports_);
        } else {
          return portsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public int getPortsCount() {
        if (portsBuilder_ == null) {
          return ports_.size();
        } else {
          return portsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public protobuf.hardware.Port.HardwarePort getPorts(int index) {
        if (portsBuilder_ == null) {
          return ports_.get(index);
        } else {
          return portsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder setPorts(
          int index, protobuf.hardware.Port.HardwarePort value) {
        if (portsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePortsIsMutable();
          ports_.set(index, value);
          onChanged();
        } else {
          portsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder setPorts(
          int index, protobuf.hardware.Port.HardwarePort.Builder builderForValue) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          ports_.set(index, builderForValue.build());
          onChanged();
        } else {
          portsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder addPorts(protobuf.hardware.Port.HardwarePort value) {
        if (portsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePortsIsMutable();
          ports_.add(value);
          onChanged();
        } else {
          portsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder addPorts(
          int index, protobuf.hardware.Port.HardwarePort value) {
        if (portsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePortsIsMutable();
          ports_.add(index, value);
          onChanged();
        } else {
          portsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder addPorts(
          protobuf.hardware.Port.HardwarePort.Builder builderForValue) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          ports_.add(builderForValue.build());
          onChanged();
        } else {
          portsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder addPorts(
          int index, protobuf.hardware.Port.HardwarePort.Builder builderForValue) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          ports_.add(index, builderForValue.build());
          onChanged();
        } else {
          portsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder addAllPorts(
          java.lang.Iterable<? extends protobuf.hardware.Port.HardwarePort> values) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ports_);
          onChanged();
        } else {
          portsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder clearPorts() {
        if (portsBuilder_ == null) {
          ports_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          portsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public Builder removePorts(int index) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          ports_.remove(index);
          onChanged();
        } else {
          portsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public protobuf.hardware.Port.HardwarePort.Builder getPortsBuilder(
          int index) {
        return getPortsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public protobuf.hardware.Port.HardwarePortOrBuilder getPortsOrBuilder(
          int index) {
        if (portsBuilder_ == null) {
          return ports_.get(index);  } else {
          return portsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public java.util.List<? extends protobuf.hardware.Port.HardwarePortOrBuilder> 
           getPortsOrBuilderList() {
        if (portsBuilder_ != null) {
          return portsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ports_);
        }
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public protobuf.hardware.Port.HardwarePort.Builder addPortsBuilder() {
        return getPortsFieldBuilder().addBuilder(
            protobuf.hardware.Port.HardwarePort.getDefaultInstance());
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public protobuf.hardware.Port.HardwarePort.Builder addPortsBuilder(
          int index) {
        return getPortsFieldBuilder().addBuilder(
            index, protobuf.hardware.Port.HardwarePort.getDefaultInstance());
      }
      /**
       * <code>repeated .protobuf.hardware.HardwarePort ports = 16;</code>
       *
       * <pre>
       * Description of each port on the board
       * </pre>
       */
      public java.util.List<protobuf.hardware.Port.HardwarePort.Builder> 
           getPortsBuilderList() {
        return getPortsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.hardware.Port.HardwarePort, protobuf.hardware.Port.HardwarePort.Builder, protobuf.hardware.Port.HardwarePortOrBuilder> 
          getPortsFieldBuilder() {
        if (portsBuilder_ == null) {
          portsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.hardware.Port.HardwarePort, protobuf.hardware.Port.HardwarePort.Builder, protobuf.hardware.Port.HardwarePortOrBuilder>(
                  ports_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          ports_ = null;
        }
        return portsBuilder_;
      }

      private float sleepCurrentUa_ ;
      /**
       * <code>optional float sleep_current_ua = 17;</code>
       *
       * <pre>
       * in microamps
       * </pre>
       */
      public boolean hasSleepCurrentUa() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float sleep_current_ua = 17;</code>
       *
       * <pre>
       * in microamps
       * </pre>
       */
      public float getSleepCurrentUa() {
        return sleepCurrentUa_;
      }
      /**
       * <code>optional float sleep_current_ua = 17;</code>
       *
       * <pre>
       * in microamps
       * </pre>
       */
      public Builder setSleepCurrentUa(float value) {
        bitField0_ |= 0x00000010;
        sleepCurrentUa_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float sleep_current_ua = 17;</code>
       *
       * <pre>
       * in microamps
       * </pre>
       */
      public Builder clearSleepCurrentUa() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sleepCurrentUa_ = 0F;
        onChanged();
        return this;
      }

      private float activeCurrentMa_ ;
      /**
       * <code>optional float active_current_ma = 18;</code>
       *
       * <pre>
       * in milliamps
       * </pre>
       */
      public boolean hasActiveCurrentMa() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float active_current_ma = 18;</code>
       *
       * <pre>
       * in milliamps
       * </pre>
       */
      public float getActiveCurrentMa() {
        return activeCurrentMa_;
      }
      /**
       * <code>optional float active_current_ma = 18;</code>
       *
       * <pre>
       * in milliamps
       * </pre>
       */
      public Builder setActiveCurrentMa(float value) {
        bitField0_ |= 0x00000020;
        activeCurrentMa_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float active_current_ma = 18;</code>
       *
       * <pre>
       * in milliamps
       * </pre>
       */
      public Builder clearActiveCurrentMa() {
        bitField0_ = (bitField0_ & ~0x00000020);
        activeCurrentMa_ = 0F;
        onChanged();
        return this;
      }

      private int numChannels_ ;
      /**
       * <code>optional uint32 num_channels = 19;</code>
       *
       * <pre>
       * The number of channels on the device
       * </pre>
       */
      public boolean hasNumChannels() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 num_channels = 19;</code>
       *
       * <pre>
       * The number of channels on the device
       * </pre>
       */
      public int getNumChannels() {
        return numChannels_;
      }
      /**
       * <code>optional uint32 num_channels = 19;</code>
       *
       * <pre>
       * The number of channels on the device
       * </pre>
       */
      public Builder setNumChannels(int value) {
        bitField0_ |= 0x00000040;
        numChannels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_channels = 19;</code>
       *
       * <pre>
       * The number of channels on the device
       * </pre>
       */
      public Builder clearNumChannels() {
        bitField0_ = (bitField0_ & ~0x00000040);
        numChannels_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:protobuf.hardware.HardwareTypeDescriptor)
    }

    static {
      defaultInstance = new HardwareTypeDescriptor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:protobuf.hardware.HardwareTypeDescriptor)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_protobuf_hardware_HardwareTypeDescriptor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_protobuf_hardware_HardwareTypeDescriptor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024TypeDescriptor.proto\022\021protobuf.hardwar" +
      "e\032\nPort.proto\"\311\001\n\026HardwareTypeDescriptor" +
      "\022\023\n\013hardware_id\030\001 \001(\r\022\021\n\toption_id\030\002 \001(\r" +
      "\022\014\n\004name\030\003 \001(\t\022.\n\005ports\030\020 \003(\0132\037.protobuf" +
      ".hardware.HardwarePort\022\030\n\020sleep_current_" +
      "ua\030\021 \001(\002\022\031\n\021active_current_ma\030\022 \001(\002\022\024\n\014n" +
      "um_channels\030\023 \001(\r"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.hardware.Port.getDescriptor(),
        }, assigner);
    internal_static_protobuf_hardware_HardwareTypeDescriptor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_protobuf_hardware_HardwareTypeDescriptor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_protobuf_hardware_HardwareTypeDescriptor_descriptor,
        new java.lang.String[] { "HardwareId", "OptionId", "Name", "Ports", "SleepCurrentUa", "ActiveCurrentMa", "NumChannels", });
    protobuf.hardware.Port.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
